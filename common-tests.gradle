apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'jacoco'

android {

    defaultConfig {
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArgument 'runnerBuilder', 'de.mannodermaus.junit5.AndroidJUnit5Builder'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions.unitTests.all {
        jacoco{
            includeNoLocationClasses = true
        }
        testLogging {
            events "passed", "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true

            afterSuite { desc, result ->
                def output = "${result.resultType} (" +
                        "${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)"
                def repeatLength = output.length()
                logger.quiet('\n' + ('=' * repeatLength) + '\n' + desc.name + '\n' + output + '\n' + ('=' * repeatLength))
            }
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE*"
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
    testImplementation 'io.mockk:mockk:1.10.0'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    androidTestImplementation 'de.mannodermaus.junit5:android-test-core:1.2.0'
    androidTestRuntimeOnly 'de.mannodermaus.junit5:android-test-runner:1.2.0'
    androidTestImplementation 'io.mockk:mockk-android:1.10.0'
}

jacoco {
    toolVersion = "0.8.5"
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        def coverageTaskName = "create${variantName.capitalize()}CoverageReport"

        tasks.create(
                name: "${variantName}JacocoTestReport",
                type: JacocoReport,
                dependsOn: [testTaskName, coverageTaskName]
        ) {
            group = "Code Coverage"

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]

            variant.getJavaCompileProvider().configure {
                def javaClasses = fileTree(
                        dir: destinationDir,
                        excludes: excludes
                )
                def kotlinClasses = fileTree(
                        dir: "${buildDir}/tmp/kotlin-classes/${variantName}",
                        excludes: excludes
                )
                classDirectories.setFrom(files([javaClasses, kotlinClasses]))
            }

            sourceDirectories.setFrom(files(["${project.projectDir}/src/main/java"]))

            executionData.setFrom(fileTree(dir: buildDir, includes: ['**/*.exec', '**/*.ec']))
        }
    }
}
